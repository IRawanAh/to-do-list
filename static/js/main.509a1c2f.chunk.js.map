{"version":3,"sources":["Items.js","mainPage.js","App.js","serviceWorker.js","index.js"],"names":["Items","state","checked","_this","props","item","completed","task","delete","checked2","checkboxChecked","id","console","log","deleted","edit","_this2","this","react_default","a","createElement","className","type","onClick","event","contentEditable","onChange","Component","MainPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getUserData","Firebase","database","ref","on","snapshot","val","setState","list","map","obj","JSON","stringify","writeUserData","handleChange","date","newDate","Date","getTime","newItem","originalState","copy","assign","slice","splice","clearCompletedTasks","filter","clear","adding","newData","target","value","clicked","preventDefault","push","copy2","prevProps","prevState","index","src_Items","today","todayDate","timeDiff","Math","abs","ceil","week","diffDays","month","class","placeholder","es","placeholderText","minDate","dateFormat","selected","rel","media","href","name","content","config","firebase","apiKey","authDomain","databaseURL","App","set","initializeApp","developers","mainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.509a1c2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass Items extends Component {\n    state = {\n        checked: this.props.item.completed,\n        task: this.props.item.task,\n        delete: '',\n        checked2: ''\n    }\n    checkboxChecked = (id) => {\n\n\n        this.props.completed(id);\n        if (this.state.checked2 == '') {\n            // this.setState({ checked2: \"checked\" });\n        }\n        else {\n            //  this.setState({ checked2: '' });\n            console.log(\"fff\")\n            // this.props.completed(id);\n        }\n        console.log(\"checked\");\n\n    }\n    deleted = (id) => {\n        // console.log('delete test', this.props)\n        this.props.deleted(id);\n    }\n    edit = () => {\n        console.log(\"ssss\");\n    }\n    render() {\n        if (this.props.item.completed == true) {\n            this.state.checked2 = \"checked\";\n        } else {\n            this.state.checked2 = \"\";\n        }\n        return (\n            <div className={this.state.delete} id=\"task\" >\n                <input type=\"checkbox\" checked={this.state.checked2} onClick={(event) => this.checkboxChecked(this.props.id)}></input>\n                <label className={this.state.checked2} contentEditable=\"true\" onChange={this.edit}  > {this.props.item.task}</label>\n                <label onClick={(event) => this.deleted(this.props.id)} className=\"deleteItem\">âœ˜</label>\n\n            </div>\n        );\n    }\n}\n\nexport default Items;\n","import React, { Component } from 'react';\nimport Items from './Items';\nimport './App.css';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as firebase from 'firebase';\n//import app from 'firebase/app';\n//import { DB_CONFIG } from './config';\nimport Firebase from 'firebase';\nconst config = {\n    firebase: {\n        apiKey: \"AIzaSyAgBvGKlPEySB6vCWVkyO5OnRiVP3pzgps\",\n        authDomain: \"todolist-692de.firebaseapp.com\",\n        databaseURL: \"https://todolist-692de.firebaseio.com\",\n    }\n}\nclass MainPage extends Component {\n    // this.app = firebase.initializeApp(DB_CONFIG);\n    constructor(props) {\n        super(props);\n        //Firebase.initializeApp(config.firebase);\n        this.state = {\n            newItem: {\n                task: '',\n                completed: false,\n                date: new Date().getTime()\n            },\n\n            list: [\n            ]\n\n        }\n    }\n\n    getUserData = () => {\n        let ref = Firebase.database().ref('/');\n        ref.on('value', snapshot => {\n            const state = snapshot.val();\n\n            /// TO DO \n            console.log(\"\\n\\n\\n\\n\\n ******\", state)\n\n            this.setState({\n                list: state.list\n\n            });\n\n\n            //console.log('DATA RETRIEVED ' + \" - \" + state.list[0].task)\n            state.list.map((obj) => { console.log('DATA RETRIEVED ' + \" - \" + obj.task) })\n            console.log('DATA RETRIEVED ' + JSON.stringify(state));\n        });\n    }\n\n    componentDidMount() {\n        // const rootRef = firebase.database().ref().child('react');\n        // const speedRef = rootRef.child('speed');\n        // speedRef.on('value', snap => {\n        //     this.setState({\n        //         speed: snap.val()\n        //     });\n        // });\n        //    this.getUserData();\n\n    }\n    componentDidUpdate(prevProps, prevState) {\n        // check on previous state\n        // only write when it's different with the new state\n        if (prevState !== this.state) {\n            console.log(\"componentDidUpdate prevProps\" + JSON.stringify(prevProps) + \"prevState \" + JSON.stringify(prevState))\n            // this.writeUserData();\n        }\n    }\n    writeUserData = () => {\n        console.log(\"this.state\\n\\n\\n\\n\\n\", this.state)\n        //Firebase.database().ref('/').set(this.state);\n\n        console.log('DATA SAVED');\n    }\n    handleChange = (date) => {\n        const newDate = new Date(date)\n        console.log(newDate.getTime())\n\n        console.log(\"this.state.newItem\\n\\n\\n ****\", date, this.state.newItem)\n        const originalState = this.state.newItem;\n        const copy = Object.assign({}, originalState)\n        copy.date = newDate.getTime();\n        this.setState({\n            newItem: copy\n        })\n    }\n\n    completed = (id) => {\n        const copy = this.state.list.slice(0);\n\n        if (copy[id].completed == true) {\n            copy[id].completed = false;\n        } else {\n            copy[id].completed = true;\n        }\n        //copy.splice(i,1);\n        this.setState({\n            list: copy,\n\n        })\n        // console.log(this.state.list[1].completed);\n    }\n\n    deleted = (id) => {\n        let copy = this.state.list.slice(0);\n        copy.splice(id, 1);\n        this.setState({\n            list: copy,\n\n        })\n        console.log(id);\n    }\n    // itemComponents = () => {\n    //     return this.state.list.map((item, index) => { return <Items item={item} deleted={this.deleted} completed={this.completed} id={index} /> })\n    // }\n    clearCompletedTasks = () => {\n        console.log(\"clear completed tasks\");\n        const copy = this.state.list.filter((item) => item.completed == false);\n        console.log(this.state.list)\n        console.log(copy)\n        this.setState({\n            list: copy\n        })\n    }\n    clear = () => { this.setState({ list: [] }) }\n    adding = (event) => {\n        //get the value\n        const newData = event.target.value;\n        // get the original \n        const originalState = this.state.newItem;\n        // make a copy of the original state\n        const copy = Object.assign({}, originalState)\n        // get key from name of input\n        // const key = event.target.name;\n        // update the copy with the data the user typed \n        copy.task = newData;\n        // update the state with the new copy \n        this.setState({ newItem: copy });\n        console.log(copy)\n    }\n\n    clicked = (event) => {\n        event.preventDefault();\n        const copy = this.state.list.slice(0);\n        copy.push(this.state.newItem);\n        const originalState = this.state.newItem;\n        // make a copy of the original state\n        const copy2 = Object.assign({}, originalState)\n        copy2.task = '';\n        this.setState({\n            list: copy,\n            newItem: copy2\n\n        })\n        this.writeUserData();\n        console.log(\"clicked\" + this.state.list);\n\n    }\n\n    render() {\n        console.log(this.state);\n        // const items = this.itemComponents()\n        // this.writeUserData();\n\n        const newList = this.state.list.map((item, index) => {\n            return <Items item={item} completed={this.completed} deleted={this.deleted} id={index} />\n\n        })\n        const today = this.state.list.map((item, index) => {\n            var todayDate = new Date;\n            var timeDiff = Math.abs(todayDate.getTime() - item.date);\n            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n            if (diffDays == 1) {\n                return <Items item={item} completed={this.completed} deleted={this.deleted} id={index} />\n            }\n        })\n        const week = this.state.list.map((item, index) => {\n            var todayDate = new Date;\n            var timeDiff = Math.abs(todayDate.getTime() - item.date);\n            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n            if (diffDays > 1 && diffDays < 7) {\n                return <Items item={item} completed={this.completed} deleted={this.deleted} id={index} />\n            }\n        })\n        const month = this.state.list.map((item, index) => {\n            var todayDate = new Date;\n            var timeDiff = Math.abs(todayDate.getTime() - item.date);\n            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n            if (diffDays > 7 && diffDays < 31) {\n                return <Items item={item} completed={this.completed} deleted={this.deleted} id={index} />\n            }\n        })\n\n\n\n\n        // this.itemComponents = this.state.list.map((item) => { return <Items item={item} /> })\n        return (\n            <div>\n                <div class=\"newTask\">\n                    <input type=\"text\" id=\"myInput\" placeholder=\"New task...\" value={this.state.newItem.task} onChange={this.adding}></input>\n                    <DatePicker\n                        class='date'\n                        placeholderText=\"Click to select a date\"\n                        minDate={new Date()}\n                        dateFormat=\"yyyy/MM/dd\"\n                        selected={this.state.newItem.date}\n                        onChange={this.handleChange}\n                    />\n                    <button onClick={this.clicked}>Add</button>\n                </div >\n                <div class=\"display\">\n                    <div class='list' id=\"today\">\n                        <h1>Today</h1>\n                        {today}\n                    </div>\n                    <div class='list' id=\"week\">\n                        <h1>This Week</h1>\n                        {week}\n                    </div>\n                    <div class='list' id=\"month\">\n                        <h1>This Month<div></div> </h1>\n                        {month}\n                    </div>\n                </div>\n                <footer>\n                    <button onClick={this.clear}>Clear</button>\n                    <button onClick={this.clearCompletedTasks}> Clear completed tasks</button>\n                </footer>\n                <br />\n                <link rel='stylesheet' media='screen and (min-width: 701px) and (max-width: 900px)' href='css/medium.css' />\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>\n            </div>\n        );\n    }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport MainPage from './mainPage';\nimport Firebase from 'firebase';\nconst config = {\n  firebase: {\n    apiKey: \"AIzaSyAgBvGKlPEySB6vCWVkyO5OnRiVP3pzgps\",\n    authDomain: \"todolist-692de.firebaseapp.com\",\n    databaseURL: \"https://todolist-692de.firebaseio.com\",\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    Firebase.initializeApp(config.firebase);\n\n    this.state = {\n      developers: []\n    }\n  }\n  writeUserData = () => {\n    Firebase.database().ref('/').set(this.state);\n    console.log('DATA SAVED');\n  }\n\n  getUserData = () => {\n    let ref = Firebase.database().ref('/');\n    ref.on('value', snapshot => {\n      const state = snapshot.val();\n      this.setState(state);\n    });\n    console.log('DATA RETRIEVED');\n  }\n\n  componentDidMount() {\n    this.getUserData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // check on previous state\n    // only write when it's different with the new state\n    if (prevState !== this.state) {\n      this.writeUserData();\n    }\n  }\n  render() {\n    const { developers } = this.state;\n    return (\n      <MainPage />);\n  }\n  //     <div className=\"container\">\n  //       <div className=\"row\">\n  //         <div className='col-xl-12'>\n  //           <h1>Firebase Development Team</h1>\n  //         </div>\n  //       </div>\n  //       <div className='row'>\n  //         <div className='col-xl-12'>\n  //           {\n  //             developers\n  //               .map(developer =>\n  //                 <div key={developer.uid} className=\"card float-left\" style={{ width: '18rem', marginRight: '1rem' }}>\n  //                   <div className=\"card-body\">\n  //                     <h5 className=\"card-title\">{developer.name}</h5>\n  //                     <p className=\"card-text\">{developer.role}</p>\n  //                     <button onClick={() => this.removeData(developer)} className=\"btn btn-link\">Delete</button>\n  //                     <button onClick={() => this.updateData(developer)} className=\"btn btn-link\">Edit</button>\n  //                   </div>\n  //                 </div>\n  //               )\n  //           }\n  //         </div>\n  //       </div>\n  //       <div className='row'>\n  //         <div className='col-xl-12'>\n  //           <h1>Add new team member here</h1>\n  //           <form onSubmit={this.handleSubmit}>\n  //             <div className=\"form-row\">\n  //               <input type='hidden' ref='uid' />\n  //               <div className=\"form-group col-md-6\">\n  //                 <label>Name</label>\n  //                 <input type=\"text\" ref='name' className=\"form-control\" placeholder=\"Name\" />\n  //               </div>\n  //               <div className=\"form-group col-md-6\">\n  //                 <label>Role</label>\n  //                 <input type=\"text\" ref='role' className=\"form-control\" placeholder=\"Role\" />\n  //               </div>\n  //             </div>\n  //             <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n  //           </form>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   )\n  // }\n\n  // handleSubmit = (event) => {\n  //   event.preventDefault();\n  //   let name = this.refs.name.value;\n  //   let role = this.refs.role.value;\n  //   let uid = this.refs.uid.value;\n\n  //   if (uid && name && role) {\n  //     const { developers } = this.state;\n  //     const devIndex = developers.findIndex(data => {\n  //       return data.uid === uid\n  //     });\n  //     developers[devIndex].name = name;\n  //     developers[devIndex].role = role;\n  //     this.setState({ developers });\n  //   }\n  //   else if (name && role) {\n  //     const uid = new Date().getTime().toString();\n  //     const { developers } = this.state;\n  //     developers.push({ uid, name, role })\n  //     this.setState({ developers });\n  //   }\n\n  //   this.refs.name.value = '';\n  //   this.refs.role.value = '';\n  //   this.refs.uid.value = '';\n  // }\n\n  // removeData = (developer) => {\n  //   const { developers } = this.state;\n  //   const newState = developers.filter(data => {\n  //     return data.uid !== developer.uid;\n  //   });\n  //   this.setState({ developers: newState });\n  // }\n\n  // updateData = (developer) => {\n  //   this.refs.uid.value = developer.uid;\n  //   this.refs.name.value = developer.name;\n  //   this.refs.role.value = developer.role;\n  // }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import * as firebase from 'firebase';\n\n// firebase.database().ref('/react/Zbm3SfpASKICXLpnUeKh').once('value').then(function (data) {\n//     console.log('data ', data)\n// })\n\n//console.log(firebase)\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}