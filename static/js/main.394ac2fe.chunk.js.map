{"version":3,"sources":["Items.js","mainPage.js","App.js","index.js"],"names":["Items","state","delete","checked2","checkboxChecked","id","_this","props","completed","console","log","deleted","_this2","this","item","react_default","a","createElement","className","type","checked","onClick","event","contentEditable","task","Component","config","firebase","apiKey","authDomain","databaseURL","MainPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getUserData","Firebase","database","ref","on","snapshot","val","list","length","setState","JSON","stringify","writeUserData","set","handleChange","date","newDate","Date","getTime","originalState","newItem","copy","assign","slice","splice","clearCompletedTasks","filter","clear","adding","newData","target","value","clicked","preventDefault","push","copy2","initializeApp","prevProps","prevState","today","map","index","todayDate","timeDiff","Math","abs","ceil","src_Items","week","diffDays","month","class","placeholder","onChange","es","placeholderText","minDate","dateFormat","selected","rel","media","href","name","content","App","mainPage","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.394ac2fe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass Items extends Component {\n    state = {\n\n        delete: '',\n        checked2: ''\n    }\n    checkboxChecked = (id) => {\n\n\n        this.props.completed(id);\n\n        console.log(\"checked\");\n\n    }\n    deleted = (id) => {\n        this.props.deleted(id);\n    }\n\n    render() {\n        if (this.props.item.completed == true) {\n            this.state.checked2 = \"checked\";\n        } else {\n            this.state.checked2 = \"\";\n        }\n        return (\n            <div className={this.state.delete} id=\"task\" >\n                <input type=\"checkbox\" checked={this.state.checked2} onClick={(event) => this.checkboxChecked(this.props.id)}></input>\n                <label className={this.state.checked2} contentEditable=\"true\"  > {this.props.item.task}</label>\n                <label onClick={(event) => this.deleted(this.props.id)} className=\"deleteItem\">âœ˜</label>\n\n            </div>\n        );\n    }\n}\n\nexport default Items;\n","import React, { Component } from 'react';\nimport Items from './Items';\nimport './App.css';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Firebase from 'firebase';\nconst config = {\n    firebase: {\n        apiKey: \"AIzaSyAgBvGKlPEySB6vCWVkyO5OnRiVP3pzgps\",\n        authDomain: \"todolist-692de.firebaseapp.com\",\n        databaseURL: \"https://todolist-692de.firebaseio.com\",\n    }\n}\nclass MainPage extends Component {\n    constructor(props) {\n        super(props);\n        Firebase.initializeApp(config.firebase);\n        this.state = {\n            newItem: {\n                task: '',\n                completed: false,\n                date: new Date().getTime()\n            },\n\n            list: [\n            ]\n\n        }\n    }\n\n    // write the data from firebase and assign it to the state list \n    getUserData = () => {\n        let ref = Firebase.database().ref('/');\n        ref.on('value', snapshot => {\n            const state = snapshot.val();\n\n            /// TO DO \n            console.log(\"\\n\\n\\n\\n\\n ******\", state.list.length)\n            if (state.list.length > 0) {\n\n                this.setState({\n                    list: state.list\n\n                });\n            }\n            console.log('DATA RETRIEVED ' + JSON.stringify(state));\n        });\n    }\n\n    componentDidMount() {\n\n        this.getUserData();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // check on previous state\n        // only write when it's different with the new state\n        if (prevState !== this.state) {\n            console.log(\"componentDidUpdate prevProps\" + JSON.stringify(prevProps) + \"prevState \" + JSON.stringify(prevState))\n            this.writeUserData();\n        }\n    }\n\n    // set the data in firebase \n    writeUserData = () => {\n        Firebase.database().ref('/').set(this.state);\n\n        console.log('DATA SAVED');\n    }\n\n    // get the date from the user\n    handleChange = (date) => {\n        const newDate = new Date(date)\n        console.log(newDate.getTime())\n        const originalState = this.state.newItem;\n        const copy = Object.assign({}, originalState)\n        copy.date = newDate.getTime();\n        this.setState({\n            newItem: copy\n        })\n    }\n\n    // set the completed condition\n    completed = (id) => {\n        const copy = this.state.list.slice(0);\n\n        if (copy[id].completed == true) {\n            copy[id].completed = false;\n        } else {\n            copy[id].completed = true;\n        }\n        this.setState({\n            list: copy,\n\n        })\n    }\n\n    // delete one task from the child class by the index \n    deleted = (id) => {\n        let copy = this.state.list.slice(0);\n        copy.splice(id, 1);\n        this.setState({\n            list: copy,\n\n        })\n        console.log(id);\n    }\n\n\n    // check if the task completed and delete the completed tasks \n    clearCompletedTasks = () => {\n        console.log(\"clear completed tasks\");\n        const copy = this.state.list.filter((item) => item.completed == false);\n        console.log(this.state.list)\n        console.log(copy)\n        this.setState({\n            list: copy\n        })\n    }\n\n    // Claer the list\n    clear = () => {\n        // this.setState({ list: [] }) \n    }\n\n    // get the value from the input field\n    adding = (event) => {\n        //get the value\n        const newData = event.target.value;\n        // get the original \n        const originalState = this.state.newItem;\n        // make a copy of the original state\n        const copy = Object.assign({}, originalState)\n        // update the copy with the data the user typed \n        copy.task = newData;\n        // update the state with the new copy \n        this.setState({ newItem: copy });\n        console.log(copy)\n    }\n\n    // when the button clicked add the task\n    clicked = (event) => {\n        event.preventDefault();\n        const copy = this.state.list.slice(0);\n        copy.push(this.state.newItem);\n        const originalState = this.state.newItem;\n        const copy2 = Object.assign({}, originalState)\n        copy2.task = '';\n        this.setState({\n            list: copy,\n            newItem: copy2\n\n        })\n        this.writeUserData();\n        console.log(\"clicked\" + this.state.list);\n\n    }\n\n    render() {\n        console.log(this.state);\n\n        // today tasks\n        const today = this.state.list.map((item, index) => {\n            var todayDate = new Date;\n            var timeDiff = Math.abs(todayDate.getTime() - item.date);\n            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n            if (diffDays == 1) {\n                return <Items item={item} completed={this.completed} deleted={this.deleted} id={index} />\n            }\n        })\n\n        // this week tasks\n        const week = this.state.list.map((item, index) => {\n            var todayDate = new Date;\n            var timeDiff = Math.abs(todayDate.getTime() - item.date);\n            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n            if (diffDays > 1 && diffDays < 7) {\n                return <Items item={item} completed={this.completed} deleted={this.deleted} id={index} />\n            }\n        })\n        // this month tasks\n        const month = this.state.list.map((item, index) => {\n            var todayDate = new Date;\n            var timeDiff = Math.abs(todayDate.getTime() - item.date);\n            var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n            if (diffDays > 7 && diffDays < 31) {\n                return <Items item={item} completed={this.completed} deleted={this.deleted} id={index} />\n            }\n        })\n\n\n\n\n        return (\n            <div>\n                <div class=\"newTask\">\n                    <input type=\"text\" id=\"myInput\" placeholder=\"New task...\" value={this.state.newItem.task} onChange={this.adding}></input>\n                    <DatePicker\n                        class='date'\n                        placeholderText=\"Click to select a date\"\n                        minDate={new Date()}\n                        dateFormat=\"yyyy/MM/dd\"\n                        selected={this.state.newItem.date}\n                        onChange={this.handleChange}\n                    />\n                    <button onClick={this.clicked}>Add</button>\n                </div >\n                <div class=\"display\">\n                    <div class='list' id=\"today\">\n                        <h1>Today</h1>\n                        {today}\n                    </div>\n                    <div class='list' id=\"week\">\n                        <h1>This Week</h1>\n                        {week}\n                    </div>\n                    <div class='list' id=\"month\">\n                        <h1>This Month<div></div> </h1>\n                        {month}\n                    </div>\n                </div>\n                <footer>\n\n                    <button onClick={this.clearCompletedTasks}> Clear completed tasks</button>\n                </footer>\n                <br />\n                <link rel='stylesheet' media='screen and (min-width: 701px) and (max-width: 900px)' href='css/medium.css' />\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></meta>\n            </div>\n        );\n    }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport MainPage from './mainPage';\nimport Firebase from 'firebase';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <MainPage />);\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}